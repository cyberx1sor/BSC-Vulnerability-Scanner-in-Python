import requests
import time
import re

BLOCKS_TO_SCAN = 100
API_KEY = "YOUR_APY_KEY_HERE"
BASE_URL = "https://api.bscscan.com/api"
API_CALLS_PER_SECOND = 5
API_CALLS_PER_DAY = 100000
SECONDS_IN_A_DAY = 86400

api_calls_counter = 0
start_time = time.time()

def check_api_limit():
    global api_calls_counter
    global start_time

    api_calls_counter += 1
    if api_calls_counter >= API_CALLS_PER_DAY:
        elapsed_time = time.time() - start_time
        if elapsed_time < SECONDS_IN_A_DAY:
            time.sleep(SECONDS_IN_A_DAY - elapsed_time)
        api_calls_counter = 0
        start_time = time.time()

    if api_calls_counter % API_CALLS_PER_SECOND == 0:
        time.sleep(1)

def get_latest_block_number():
    check_api_limit()
    url = f"{BASE_URL}?module=proxy&action=eth_blockNumber&apikey={API_KEY}"
    response = requests.get(url)
    result = int(response.json()["result"], 16)
    return result

def get_transactions_from_block(block_number):
    check_api_limit()
    url = f"{BASE_URL}?module=proxy&action=eth_getBlockByNumber&tag={hex(block_number)}&boolean=true&apikey={API_KEY}"
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Error: API request failed with status code {response.status_code}. Response content: {response.content}")
        return []
    try:
        result = response.json()["result"]
    except ValueError:
        print(f"Error: Unable to parse JSON response. Response content: {response.content}")
        return []

    if result is None:
        return []
    transactions = result["transactions"]
    return transactions

def get_contract_creations(block_number):
    check_api_limit()
    url = f"{BASE_URL}?module=account&action=txlistinternal&startblock={block_number}&endblock={block_number}&sort=asc&apikey={API_KEY}"
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Error: API request failed. Status code {response.status_code}. Response content: {response.content}")
        return []
    try:
        result = response.json()["result"]
    except ValueError:
        print(f"Error: Unable to parse JSON response. Response content: {response.content}")
        return []

    contract_creations = []
    for tx in result:
        if tx["isError"] == "0" and tx["contractAddress"] != "":
            contract_creations.append({"contractAddress": tx["contractAddress"], "blockNumber": block_number})

    transactions = get_transactions_from_block(block_number)
    for tx in transactions:
        if tx['to'] == '0x0000000000000000000000000000000000000000':
            contract_creations.append({"contractAddress": tx["from"], "blockNumber": block_number})

    return contract_creations

def get_contract_source_code(contract_address):
    check_api_limit()
    url = f"{BASE_URL}?module=contract&action=getabi&address={contract_address}&apikey={API_KEY}"
    response = requests.get(url)
    if response.status_code != 200:
        return ""
    result = response.json()["result"]
    return result

def check_reentrancy_vulnerability(source_code):
    # Buscamos varias secuencias de instrucciones relacionadas con llamadas externas en el cÃ³digo fuente
    reentrancy_patterns = [
        re.compile(r'call\.value\s*\(.*\)\.gas', re.IGNORECASE),
        re.compile(r'\.call\(', re.IGNORECASE),
        re.compile(r'\.callcode\(', re.IGNORECASE),
        re.compile(r'\.delegatecall\(', re.IGNORECASE),
        re.compile(r'\.staticcall\(', re.IGNORECASE)
    ]

    for pattern in reentrancy_patterns:
        if pattern.search(source_code):
            return True

    return False


def scan_block(block_number):
    contract_creations = get_contract_creations(block_number)
    for contract_creation in contract_creations:
        contract_address = contract_creation["contractAddress"]
        source_code = get_contract_source_code(contract_address)
        if check_reentrancy_vulnerability(source_code):
            print(f"Possible reentrancy vulnerability detected in contract {contract_address}, created in block {contract_creation['blockNumber']}")
        else:
            print(f"The contract {contract_address}, created in block {contract_creation['blockNumber']}, is not vulnerable")

def scan_new_contracts():
    latest_block = get_latest_block_number()
    start_block = latest_block - BLOCKS_TO_SCAN
    for block_number in range(start_block, latest_block + 1):
        print("Scanning block:", block_number)
        scan_block(block_number)
        time.sleep(1)

if __name__ == "__main__":
    while True:
        scan_new_contracts()
